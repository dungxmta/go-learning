// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import model "testProject/learning/example/api_jwt_mongo/model"

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

// CheckLogin provides a mock function with given fields: email, password
func (_m *UserRepo) CheckLogin(email string, password string) (model.User, error) {
	ret := _m.Called(email, password)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(string, string) model.User); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: queryData
func (_m *UserRepo) FindAll(queryData map[string]interface{}) ([]model.User, error) {
	ret := _m.Called(queryData)

	var r0 []model.User
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []model.User); ok {
		r0 = rf(queryData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(queryData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: queryData
func (_m *UserRepo) FindOne(queryData map[string]interface{}) (model.User, error) {
	ret := _m.Called(queryData)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(map[string]interface{}) model.User); ok {
		r0 = rf(queryData)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(queryData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: u
func (_m *UserRepo) Insert(u *model.User) (string, error) {
	ret := _m.Called(u)

	var r0 string
	if rf, ok := ret.Get(0).(func(*model.User) string); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.User) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
